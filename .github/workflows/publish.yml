name: Publish NuGet Package

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # Step 1: Trigger and Validation (Checkout repository, Validate tag format, Extract version from tag)
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      tag: ${{ steps.extract-version.outputs.tag }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate tag format
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Tag '$TAG_NAME' does not follow semantic versioning format (v{major}.{minor}.{patch})"
          exit 1
        fi
        echo "Tag format validated: $TAG_NAME"

    - name: Extract version from tag
      id: extract-version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

  # Step 2: Run Tests
  test:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Restore dependencies
      run: dotnet restore MapsterChecker.sln

    - name: Build solution
      run: dotnet build MapsterChecker.sln --configuration Release --no-restore

    - name: Run Tests
      run: dotnet test MapsterChecker.Tests/MapsterChecker.Tests.csproj --no-build --configuration Release --verbosity normal

  # Step 3: Update Package Version in release branch
  update-version:
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
    - name: Check API key and repository token
      run: |
        if [ -z "${{ secrets.REPOSITORY_TOKEN }}" ]; then
          echo "Error: REPOSITORY_TOKEN secret is not set."
          exit 1
        else
          echo "REPOSITORY_TOKEN is set."
        fi
        
        if [ -z "${{ secrets.NUGET_API_KEY }}" ]; then
          echo "Error: NUGET_API_KEY secret is not set."
          exit 1
        else
          echo "NUGET_API_KEY is set."
        fi
  
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPOSITORY_TOKEN }}
        fetch-depth: 0

    - name: Create release branch
      run: |
        git checkout -b release/${{ needs.validate.outputs.tag }}

    - name: Update MapsterChecker.Analyzer package version
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        # Update PackageVersion in the csproj file
        sed -i "s/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>$VERSION<\/PackageVersion>/" MapsterChecker.Analyzer/MapsterChecker.Analyzer.csproj
        echo "Updated MapsterChecker.Analyzer version to $VERSION"

    - name: Commit version updates
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add MapsterChecker.Analyzer/MapsterChecker.Analyzer.csproj
        
        # Only commit if there are changes
        if ! git diff --cached --quiet; then
          git commit -m "chore: update package version to $VERSION"
        else
          echo "No changes to commit"
        fi

    - name: Push version updates to repository
      run: |
        # Push the release branch
        git push -f origin HEAD:refs/heads/release/${{ needs.validate.outputs.tag }}

  # Step 4: Build and Package
  build-and-pack:
    runs-on: ubuntu-latest
    needs: [validate, update-version]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: release/${{ needs.validate.outputs.tag }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Restore dependencies
      run: dotnet restore MapsterChecker.Analyzer/MapsterChecker.Analyzer.csproj

    - name: Build project
      run: dotnet build MapsterChecker.Analyzer/MapsterChecker.Analyzer.csproj --configuration Release --no-restore

    - name: Pack NuGet package
      run: |
        mkdir -p ./nupkg
        dotnet pack MapsterChecker.Analyzer/MapsterChecker.Analyzer.csproj --configuration Release --no-build --output ./nupkg

    - name: Upload package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./nupkg/*.nupkg

  # Step 5: Publish to NuGet
  publish:
    runs-on: ubuntu-latest
    needs: [validate, build-and-pack]
    
    steps:
    - name: Download package artifact
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: ./nupkg

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Publish package to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        dotnet nuget push ./nupkg/*.nupkg --source https://api.nuget.org/v3/index.json --api-key $NUGET_API_KEY --skip-duplicate

  # Step 6: Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: [validate, publish]
    
    steps:
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
      with:
        tag_name: ${{ needs.validate.outputs.tag }}
        release_name: Release ${{ needs.validate.outputs.tag }}
        body: |
          ## MapsterChecker.Analyzer ${{ needs.validate.outputs.version }}
          
          ### What's New
          - Support for `with` expression property overrides in record types
          - When using `Adapt()` with record types followed by a `with` expression, properties explicitly overridden in the `with` clause are now excluded from compatibility checking
          
          ### Package
          - MapsterChecker.Analyzer v${{ needs.validate.outputs.version }}
          
          The package has been published to NuGet.org and is available for download.
          
          ### Installation
          ```xml
          <PackageReference Include="MapsterChecker.Analyzer" Version="${{ needs.validate.outputs.version }}">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
          </PackageReference>
          ```
        draft: false
        prerelease: false

  # Step 7: Merge to main branch and cleanup
  merge-and-cleanup:
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPOSITORY_TOKEN }}
        fetch-depth: 0

    - name: Merge release branch to main
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Fetch all branches
        git fetch origin
        
        # Switch to main branch (or master if that's what you use)
        git checkout main || git checkout master
        
        # Pull latest changes
        git pull origin main || git pull origin master
        
        # Merge the release branch
        git merge origin/release/${{ needs.validate.outputs.tag }} --no-ff -m "chore: merge release/${{ needs.validate.outputs.tag }} into main"
        
        # Push the merge
        git push origin main || git push origin master

    - name: Delete release branch
      run: |
        # Delete the remote release branch
        git push origin --delete release/${{ needs.validate.outputs.tag }}
        echo "Deleted release branch: release/${{ needs.validate.outputs.tag }}"